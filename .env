import 'dart:async';
import 'dart:io';
import 'package:dio/dio.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:logger/logger.dart';
import 'package:mytrb/Helper/custom_snackbar.dart';
import 'package:mytrb/Helper/environment.dart';
import 'package:mytrb/Helper/strings_enum.dart';
import 'package:mytrb/Repository/user_repository.dart';
import 'package:pretty_dio_logger/pretty_dio_logger.dart';
import 'package:mytrb/bloc/Auth/auth_bloc.dart';
import 'package:mytrb/main.dart';
import 'api_exceptions.dart';

enum RequestType {
  get,
  post,
  put,
  delete,
}

class BaseClient {
  static final Dio _dio = Dio(
    BaseOptions(
      headers: {
        'Content-Type': ContentType.json.toString(),
        'Accept': 'application/json',
      },
    ),
  )..interceptors.addAll([
      PrettyDioLogger(
        requestHeader: true,
        requestBody: true,
        responseBody: true,
        responseHeader: false,
        error: true,
        compact: true,
        maxWidth: 90,
      ),
      InterceptorsWrapper(
        onRequest: (options, handler) async {
          // Ambil token dari storage
          Map tokenData = await UserRepository.getToken();
          String accessToken = tokenData['token'];

          if (accessToken.isNotEmpty) {
            options.headers["authorization"] = "Bearer $accessToken";
          }
          handler.next(options);
        },
        onError: (DioException error, handler) async {
          if (error.response?.statusCode == 401 ||
              error.response?.statusCode == 403) {
            // Coba refresh token jika token utama expired
            bool isRefreshed = await _refreshToken();
            if (isRefreshed) {
              return handler.resolve(await _retryRequest(error.requestOptions));
            } else {
              navigatorKey.currentState!.overlay!.context
                  .read<AuthBloc>()
                  .add(SetUnauthorize());
            }
          }
          handler.next(error);
        },
      )
    ]);

  static const int _timeoutInSeconds = 10;

  static Dio get dio => _dio;

  static Future<bool> _refreshToken() async {
    try {
      Map tokenData = await UserRepository.getToken();
      String refreshToken = tokenData['refreshToken'];

      if (refreshToken.isNotEmpty) {
        final response = await _dio.post(
          Environment.refreshUrl,
          data: {"time": DateTime.now().millisecondsSinceEpoch},
          options: Options(headers: {"authorization": "Bearer $refreshToken"}),
        );

        if (response.statusCode == 200) {
          String newToken = response.data['token'];
          String newRefreshToken = response.data['refresh_token'];

          await UserRepository.setToken(
              token: newToken, refreshToken: newRefreshToken);
          _dio.options.headers["authorization"] = "Bearer $newToken";
          return true;
        }
      }
    } catch (e) {
      Logger().e('Error while refreshing token: $e');
    }
    return false;
  }

  /// Fungsi untuk mengulang request setelah token diperbarui
  static Future<Response> _retryRequest(RequestOptions requestOptions) async {
    return await _dio.request(
      requestOptions.path,
      data: requestOptions.data,
      queryParameters: requestOptions.queryParameters,
      options: Options(
        method: requestOptions.method,
        headers: requestOptions.headers,
        responseType: requestOptions.responseType,
      ),
    );
  }

  static safeApiCall(
    String url,
    RequestType requestType, {
    Map<String, dynamic>? headers,
    Map<String, dynamic>? queryParameters,
    required Function(Response response) onSuccess,
    Function(ApiException)? onError,
    Function(int value, int progress)? onReceiveProgress,
    Function(int total, int progress)? onSendProgress,
    Function? onLoading,
    dynamic data,
    bool isJson = false,
  }) async {
    try {
      // Cek token jika perlu di-refresh
      await onLoading?.call();

      Options requestOptions = Options(
        headers: headers,
        contentType: ContentType.json.toString(),
      );

      // Lanjutkan dengan api call yang ada
      late Response response;
      if (requestType == RequestType.get) {
        response = await _dio.get(
          url,
          queryParameters: queryParameters,
          options: Options(
            headers: headers,
          ),
        );
      } else if (requestType == RequestType.post) {
        response = await _dio.post(url,
            data: isJson ? data : FormData.fromMap(data),
            onReceiveProgress: onReceiveProgress,
            onSendProgress: onSendProgress,
            queryParameters: queryParameters,
            options: requestOptions);
      } else if (requestType == RequestType.put) {
        response = await _dio.put(url,
            data: isJson ? data : FormData.fromMap(data),
            onReceiveProgress: onReceiveProgress,
            onSendProgress: onSendProgress,
            queryParameters: queryParameters,
            options: requestOptions);
      } else {
        response = await _dio.delete(url,
            data: data,
            queryParameters: queryParameters,
            options: requestOptions);
      }

      // 3) return response (api done successfully)
      await onSuccess(response);
    } on DioException catch (error) {
      _handleDioError(error: error, url: url, onError: onError);
    } on SocketException {
      _handleSocketException(url: url, onError: onError);
    } on TimeoutException {
      _handleTimeoutException(url: url, onError: onError);
    } catch (error, stackTrace) {
      Logger().e(stackTrace);
      _handleUnexpectedException(url: url, onError: onError, error: error);
    }
  }

  /// download file
  static download(
      {required String url, // file url
      required String savePath, // where to save file
      Function(ApiException)? onError,
      Function(int value, int progress)? onReceiveProgress,
      required Function onSuccess}) async {
    try {
      await _dio.download(
        url,
        savePath,
        options: Options(
            receiveTimeout: const Duration(seconds: _timeoutInSeconds),
            sendTimeout: const Duration(seconds: _timeoutInSeconds)),
        onReceiveProgress: onReceiveProgress,
      );
      onSuccess();
    } catch (error) {
      var exception = ApiException(url: url, message: error.toString());
      onError?.call(exception) ?? _handleError(error.toString());
    }
  }

  /// handle unexpected error
  static _handleUnexpectedException(
      {Function(ApiException)? onError,
      required String url,
      required Object error}) {
    if (onError != null) {
      onError(ApiException(
        message: error.toString(),
        url: url,
      ));
    } else {
      _handleError(error.toString());
    }
  }

  /// handle timeout exception
  static _handleTimeoutException(
      {Function(ApiException)? onError, required String url}) {
    if (onError != null) {
      onError(ApiException(
        message: Strings.serverNotResponding,
        url: url,
      ));
    } else {
      _handleError(Strings.serverNotResponding);
    }
  }

  /// handle timeout exception
  static _handleSocketException(
      {Function(ApiException)? onError, required String url}) {
    if (onError != null) {
      onError(ApiException(
        message: Strings.noInternetConnection,
        //message: Strings.noInternetConnection.tr,
        url: url,
      ));
    } else {
      _handleError(Strings.noInternetConnection);
      //_handleError(Strings.noInternetConnection.tr);
    }
  }

  /// handle Dio error
  static _handleDioError({
    required DioException error,
    Function(ApiException)? onError,
    required String? url,
  }) {
    // Handle kasus ketika 'status' dalam response adalah false
    if (error.response?.data['status'] == false) {
      var message = error.response?.data['message'] ?? 'Unknown error occurred';

      var exception = ApiException(
        message: message,
        url: url ?? '',
        statusCode: error.response?.statusCode ?? 400,
      );

      if (onError != null) {
        return onError(exception);
      } else {
        return handleApiError(exception);
      }
    }

    // Handle 404 error secara spesifik
    if (error.response?.statusCode == 404) {
      var message = error.response?.data['message'] ?? Strings.urlNotFound;

      var exception = ApiException(
        message: message,
        url: url ?? '',
        statusCode: 404,
      );

      if (onError != null) {
        return onError(exception);
      } else {
        return handleApiError(exception);
      }
    }

    // Handle no internet connection
    if (error.message != null &&
        error.message!.toLowerCase().contains('socket')) {
      var exception = ApiException(
        message: Strings.noInternetConnection,
        url: url ?? '',
      );

      if (onError != null) {
        return onError(exception);
      } else {
        return _handleError(Strings.noInternetConnection);
      }
    }

    // Handle 500 server error
    if (error.response?.statusCode == 500) {
      var exception = ApiException(
        message: Strings.serverError,
        url: url ?? '',
        statusCode: 500,
      );

      if (onError != null) {
        return onError(exception);
      } else {
        return handleApiError(exception);
      }
    }

    // Default error handling
    var exception = ApiException(
      url: url ?? '',
      message: error.message ?? 'Unexpected API Error!',
      response: error.response,
      statusCode: error.response?.statusCode,
    );

    if (onError != null) {
      return onError(exception);
    } else {
      return handleApiError(exception);
    }
  }

  /// handle error automaticly (if user didnt pass onError) method
  /// it will try to show the message from api if there is no message
  /// from api it will show the reason (the dio message)
  static handleApiError(ApiException apiException) {
    String msg = apiException.toString();
    CustomSnackBar.showCustomErrorToast(message: msg);
  }

  /// handle errors without response (500, out of time, no internet,..etc)
  static _handleError(String msg) {
    CustomSnackBar.showCustomErrorToast(message: msg);
  }
}
